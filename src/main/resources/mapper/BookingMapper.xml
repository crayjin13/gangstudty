<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
<mapper namespace="com.jts.gangstudy.mapper.BookingMapper">
	<!-- 예약 추가 -->
	<insert id="insertBook" parameterType="com.jts.gangstudy.domain.Booking">
	  INSERT INTO BOOKING_TB
	  (USER_NO, ROOM_NO, CHECK_IN, CHECK_OUT, PEOPLE, STATE, REQUEST_DT) VALUES
	  (#{user_no}, #{room_no}, #{check_in}, #{check_out}, #{people}, #{state}, SYSDATE)
	  <selectKey keyProperty="book_no" resultType="int" order="AFTER">
	    SELECT BOOKING_TB_SEQ.CURRVAL FROM DUAL
	  </selectKey>
	</insert>
	
	<!-- 예약 삭제 -->
	<delete id="deleteBook" parameterType="int">
	  DELETE FROM BOOKING_TB
	  WHERE BOOK_NO = #{book_no}
	</delete>
	
	<!-- 상태 변경 -->
	<update id="updateState" parameterType="hashmap">
	  UPDATE BOOKING_TB
	  SET STATE = #{state} 
	  WHERE BOOK_NO = #{book_no}
	</update>
	
	<!-- 모든 예약 검색 -->
	<select id="selectAll" resultType="com.jts.gangstudy.domain.Booking">  
	SELECT *
	FROM BOOKING_TB
	ORDER BY book_no DESC 
	</select>
	
	<!-- 유저 번호로 조회 -->
	<select id="selectByUser" parameterType="int" resultType="com.jts.gangstudy.domain.Booking">
	  SELECT *
	  FROM BOOKING_TB
	  WHERE USER_NO = #{user_no} 
	  ORDER BY book_no DESC 
	</select>
	
	<!-- 요청한 유저의 예약을 제외하고 uncharge, wait, use 상태인 예약
		 요청한 유저가 예약할 수 있는 시작 시간 -->
	<select id="selectAlreadyBooked" parameterType="hashmap" resultType="com.jts.gangstudy.domain.Booking">
	  SELECT *
	  FROM BOOKING_TB
	  WHERE CHECK_IN  BETWEEN TO_DATE(#{date}, 'YYYY-MM-DD') AND TO_DATE(#{date}, 'YYYY-MM-DD') + 0.99999 AND
	  		CHECK_OUT BETWEEN TO_DATE(#{date}, 'YYYY-MM-DD') AND TO_DATE(#{date}, 'YYYY-MM-DD') + 0.99999 AND
	  		BOOK_NO != #{book_no} AND
	  		(STATE='uncharge' OR STATE='wait' OR STATE='use')
	</select>
	
	<!-- 요청한 유저의 예약을 제외하고 uncharge, wait 상태인 예약
		 요청한 유저가 예약할 수 있는 종료 시간 -->
	<select id="selectNextBook" parameterType="hashmap" resultType="com.jts.gangstudy.domain.Booking">
	  SELECT *
	  FROM BOOKING_TB
	  <![CDATA[
	  WHERE CHECK_IN >= #{startDateTime} AND
	  		CHECK_OUT > TO_DATE(#{endDate}, 'YYYY-MM-DD') AND
			CHECK_OUT < TO_DATE(#{endDate}, 'YYYY-MM-DD') + 1 AND
	  		USER_NO != #{user_no} AND
	  		(STATE='uncharge' OR STATE='wait') AND
	  		ROWNUM = 1
        	ORDER BY CHECK_IN
	  ]]>
	</select>
	
	<!-- 예약 번호로 조회 -->
	<select id="selectByBookNo" parameterType="int" resultType="com.jts.gangstudy.domain.Booking">
	  SELECT *
	  FROM BOOKING_TB
	  WHERE BOOK_NO = #{book_no}
	</select>
	
	<!-- 예약시간 중복 확인-->
	<select id="selectDuplicate" parameterType="hashmap" resultType="int">
	  SELECT count(*) cnt
	  FROM BOOKING_TB
	  <![CDATA[
	  WHERE CHECK_IN < #{check_out} AND
	  		CHECK_OUT > #{check_in} AND
	  		(STATE='uncharge' OR STATE='wait')
	  ]]>
	</select>
	
	<!-- 유저의 특정 상태로 조회 -->
	<select id="selectByUserState" parameterType="hashmap" resultType="com.jts.gangstudy.domain.Booking">
	  SELECT *
	  FROM BOOKING_TB
	  WHERE USER_NO = TO_NUMBER(#{user_no}) AND STATE = #{state}
	</select>
	
	<!-- 날짜+시간으로 조회 -->
	<select id="selectByDateTime" parameterType="java.time.LocalDateTime" resultType="com.jts.gangstudy.domain.Booking">
	  SELECT *
	  FROM BOOKING_TB
	  WHERE CHECK_IN = #{dateTime} OR CHECK_OUT = #{dateTime}
	</select>
	
	<!--  상태로 조회 -->
	<select id="selectByState" parameterType="String" resultType="com.jts.gangstudy.domain.Booking">
	  SELECT *
	  FROM BOOKING_TB
	  WHERE STATE = #{state}
	</select>
</mapper>